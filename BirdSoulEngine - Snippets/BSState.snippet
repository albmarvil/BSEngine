<?xml version="1.0" encoding="utf-8" ?>

<CodeSnippet Format="1.0.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <Header>
    <Title>BSState Snippet</Title>
    <Author>Alberto Martínez Villarán</Author>
    <Shortcut>BSState</Shortcut>
    <Description>
      Adds a code region with the definiton of the BSState instance.
    </Description>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>ClassName</ID>
        <Default>ClassName</Default>
      </Literal>
      <Literal>
        <ID>StateName</ID>
        <Default>StateName</Default>
      </Literal>
      <Literal>
        <ID>SceneName</ID>
        <Default>SceneName</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
      <![CDATA[    
using UnityEngine;
using System.Collections.Generic;
using BSEngine;
using BSEngine.Input;


public class $ClassName$ : State
{
    /// <summary>
    /// State constructor. Should call the base class
    /// </summary>
    public $ClassName$()
        : base("$StateName$", "$SceneName$")
    {
        Debug.Log("$StateName$ State created");
    }
    
    /// <summary>
    /// method used to create the InputSet from the Config file loaded
    /// </summary>
    private InputSet createInputSet()
    {

        if (StorageMgr.Blackboard.ContainsKey("CFG"))
        {
            DataTable cfg = StorageMgr.Blackboard.Get<DataTable>("CFG");

            if (cfg.ContainsKey("$ClassName$InputSet"))
            {
                DataTable inputSetData = cfg.Get<DataTable>("$ClassName$InputSet");

                return new InputSet(inputSetData);
            }
            else
            {
                InputSet res = createDefaultInputSet();
                DataTable inputSetData = res.ToDataTable();
                StorageMgr.Blackboard.Get<DataTable>("CFG").Set<DataTable>("$ClassName$InputSet", inputSetData);
                return res;
            }
        }
        else
        {
            return createDefaultInputSet();
        }  
    }

    /// <summary>
    /// Method to create the default Input Set in case there is no CFG file loaded
    /// </summary>
    public InputSet createDefaultInputSet()
    {
        Dictionary<BSKeyCode, List<string>> keyBindings = new Dictionary<BSKeyCode, List<string>>();


        return new InputSet("$ClassName$InputSet", keyBindings, null);
    }
    
    
    /// <summary>
    /// Called on Init step. Used for specific state code
    /// </summary>
    /// <returns>True if everything went ok</returns>
    protected override bool open()
    {
        Debug.Log("$StateName$ state open");
        return true;
    }

    /// <summary>
    /// Called on Release step. Used for specific state code
    /// </summary>
    protected override void close()
    {
        Debug.Log("$StateName$ state close");
    }

    /// <summary>
    /// Called on Activate step. Used for specific state code
    /// </summary>
    /// <returns>True if everything went ok</returns>
    protected override bool onActivate()
    {
        Debug.Log("$StateName$ state activate");
        return true;
    }

    /// <summary>
    /// Called on Resume step. Used for specific state code
    /// </summary>
    /// <returns>True if everything went ok</returns>
    protected override bool onResume()
    {
        Debug.Log("$StateName$ state resume");
        return true;
    }

    /// <summary>
    /// Called on Deactivate step. Used for specific state code
    /// </summary>
    protected override void onDeactivate()
    {
        Debug.Log("$StateName$ state deactivate");
    }

    /// <summary>
    /// Called on Pause step. Used for specific state code
    /// </summary>
    protected override void onPause()
    {
        Debug.Log("$StateName$ state pause");
    }
}
]]>
    </Code>
  </Snippet>
</CodeSnippet>
